name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  REMOTE_HOST: ${{ secrets.REMOTE_IP }}
  REMOTE_USER: ${{ secrets.REMOTE_USERNAME }}
  REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
  PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  SSH_PORT: ${{ secrets.SSH_PORT }}

jobs:
  build-and-push-docker:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # - name: Set up application-prod.yml
      #   run: echo "${{ secrets.DEV_APPLICATION }}" > ./src/main/resources/application-prod.yml

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


  deploy-to-server:

    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          password: ${{ env.REMOTE_PASSWORD }}
          key: ${{ env.PRIVATE_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
            sudo docker run --name ${{ env.CONTAINER_NAME }} -d -p 8089:8089 -e TZ=Asia/Seoul ${{ env.DOCKER_IMAGE_NAME }}